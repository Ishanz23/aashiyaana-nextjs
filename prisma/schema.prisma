generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("RAILWAY_DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  mobile      String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  firstname   String
  lastname    String
  sex         String
  dob         DateTime
  nationality String
  address     String?
  password    Password?
  Reservation Reservation[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id          String         @id @default(cuid())
  email       String         @unique
  mobile      String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  firstname   String
  lastname    String
  sex         String?
  dob         DateTime
  nationality String?
  address     String?
  password    AdminPassword?
}

model AdminPassword {
  hash    String
  adminId String @unique
  user    Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Guest {
  id           String         @id @default(cuid())
  firstname    String
  lastName     String
  mobile       String?        @unique
  email        String?        @unique
  RoomReserved RoomReserved[]
}

model Location {
  id          String     @id @default(cuid())
  name        String     @unique
  lat         Float
  long        Float
  state       String
  altitude    Int
  description String
  coverUrl    String
  Homestay    Homestay[]
}

model Homestay {
  id                String              @id @default(cuid())
  name              String
  address           String
  locationName      String
  location          Location            @relation(fields: [locationName], references: [name], onDelete: Cascade)
  HomestayAmenities HomestayAmenities[]
  HomestayGallery   HomestayGallery[]
  Reservation       Reservation[]
  Rooms             Room[]

  @@index([locationName])
}

model Room {
  id                  String         @id @default(cuid())
  name                String
  toiletAttached      Boolean
  airConditioned      Boolean
  kitchenAttached     Boolean
  isDorm              Boolean
  homestayId          String
  description         String
  occupancy           Int
  houseRecommendation Boolean        @default(false)
  category            Category[]
  Rate                Rate[]
  homestay            Homestay       @relation(fields: [homestayId], references: [id])
  RoomFeatures        RoomFeatures[]
  RoomGallery         RoomGallery[]
  RoomReserved        RoomReserved[]

  @@index([homestayId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String
  roomId      String?
  Room        Room?   @relation(fields: [roomId], references: [id])
}

model Rate {
  id         String  @id @default(cuid())
  headCount  Int
  tariff     Int
  refundable Boolean
  roomId     String
  room       Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model FoodPlan {
  id           String         @id @default(cuid())
  name         String
  tariff       Decimal
  nonVeg       Boolean?
  RoomReserved RoomReserved[]

  @@unique([name, nonVeg])
}

model Reservation {
  id          String   @id @default(cuid())
  createdAt   DateTime
  modifiedAt  DateTime
  dateIn      DateTime
  dateOut     DateTime
  totalAmount Decimal
  dueAmount   Decimal
  userId      String
  homestayId  String
  homestay    Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([homestayId])
}

model RoomReserved {
  id           String   @id @default(cuid())
  pax          Int
  amount       Decimal
  status       String
  guestId      String
  roomId       String
  foodPlanId   String
  foodPlan     FoodPlan @relation(fields: [foodPlanId], references: [id], onDelete: Cascade)
  primaryGuest Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade)
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([guestId])
  @@index([roomId])
  @@index([foodPlanId])
}

model Amenity {
  id                String              @id @default(cuid())
  name              String              @unique
  description       String?
  HomestayAmenities HomestayAmenities[]
}

model Feature {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  RoomFeatures RoomFeatures[]
}

model HomestayAmenities {
  homestayId String
  amenityId  String
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  homestay   Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade)

  @@unique([homestayId, amenityId])
  @@index([homestayId])
  @@index([amenityId])
}

model RoomFeatures {
  roomId    String
  featureId String
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, featureId])
  @@index([roomId])
  @@index([featureId])
}

model HomestayGallery {
  url         String   @id
  category    String
  description String?
  homestayId  String
  homestay    Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade)

  @@index([homestayId])
}

model RoomGallery {
  url         String  @id
  category    String
  description String?
  roomId      String
  room        Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}
